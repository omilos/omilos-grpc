// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: omilos.proto

package omilos_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmilosClient is the client API for Omilos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmilosClient interface {
	Casts(ctx context.Context, in *CastsRequest, opts ...grpc.CallOption) (Omilos_CastsClient, error)
}

type omilosClient struct {
	cc grpc.ClientConnInterface
}

func NewOmilosClient(cc grpc.ClientConnInterface) OmilosClient {
	return &omilosClient{cc}
}

func (c *omilosClient) Casts(ctx context.Context, in *CastsRequest, opts ...grpc.CallOption) (Omilos_CastsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Omilos_ServiceDesc.Streams[0], "/omilos_grpc.Omilos/Casts", opts...)
	if err != nil {
		return nil, err
	}
	x := &omilosCastsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Omilos_CastsClient interface {
	Recv() (*CastsResponse, error)
	grpc.ClientStream
}

type omilosCastsClient struct {
	grpc.ClientStream
}

func (x *omilosCastsClient) Recv() (*CastsResponse, error) {
	m := new(CastsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OmilosServer is the server API for Omilos service.
// All implementations must embed UnimplementedOmilosServer
// for forward compatibility
type OmilosServer interface {
	Casts(*CastsRequest, Omilos_CastsServer) error
	mustEmbedUnimplementedOmilosServer()
}

// UnimplementedOmilosServer must be embedded to have forward compatible implementations.
type UnimplementedOmilosServer struct {
}

func (UnimplementedOmilosServer) Casts(*CastsRequest, Omilos_CastsServer) error {
	return status.Errorf(codes.Unimplemented, "method Casts not implemented")
}
func (UnimplementedOmilosServer) mustEmbedUnimplementedOmilosServer() {}

// UnsafeOmilosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmilosServer will
// result in compilation errors.
type UnsafeOmilosServer interface {
	mustEmbedUnimplementedOmilosServer()
}

func RegisterOmilosServer(s grpc.ServiceRegistrar, srv OmilosServer) {
	s.RegisterService(&Omilos_ServiceDesc, srv)
}

func _Omilos_Casts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CastsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OmilosServer).Casts(m, &omilosCastsServer{stream})
}

type Omilos_CastsServer interface {
	Send(*CastsResponse) error
	grpc.ServerStream
}

type omilosCastsServer struct {
	grpc.ServerStream
}

func (x *omilosCastsServer) Send(m *CastsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Omilos_ServiceDesc is the grpc.ServiceDesc for Omilos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Omilos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omilos_grpc.Omilos",
	HandlerType: (*OmilosServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Casts",
			Handler:       _Omilos_Casts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "omilos.proto",
}
