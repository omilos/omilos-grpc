// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: omilos.proto

package omilos_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OmilosClient is the client API for Omilos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OmilosClient interface {
	// Auth actions
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Hub actions
	PostCast(ctx context.Context, in *PostCastRequest, opts ...grpc.CallOption) (*Cast, error)
	LikeCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*BaseResponse, error)
	RecastCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*BaseResponse, error)
	// Back actions
	UpdateUserCastContext(ctx context.Context, in *UserCastContextUpdate, opts ...grpc.CallOption) (*BaseResponse, error)
	// Read
	GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*User, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*Notifications, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	GetCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*Cast, error)
	GetCasts(ctx context.Context, in *GetCastsRequest, opts ...grpc.CallOption) (*Casts, error)
	GetPublications(ctx context.Context, in *GetPublicationsRequest, opts ...grpc.CallOption) (*Publications, error)
}

type omilosClient struct {
	cc grpc.ClientConnInterface
}

func NewOmilosClient(cc grpc.ClientConnInterface) OmilosClient {
	return &omilosClient{cc}
}

func (c *omilosClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) PostCast(ctx context.Context, in *PostCastRequest, opts ...grpc.CallOption) (*Cast, error) {
	out := new(Cast)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/PostCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) LikeCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/LikeCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) RecastCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/RecastCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) UpdateUserCastContext(ctx context.Context, in *UserCastContextUpdate, opts ...grpc.CallOption) (*BaseResponse, error) {
	out := new(BaseResponse)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/UpdateUserCastContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetMe(ctx context.Context, in *GetMeRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*Notifications, error) {
	out := new(Notifications)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetNotifications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetCast(ctx context.Context, in *CastIdentifier, opts ...grpc.CallOption) (*Cast, error) {
	out := new(Cast)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetCast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetCasts(ctx context.Context, in *GetCastsRequest, opts ...grpc.CallOption) (*Casts, error) {
	out := new(Casts)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetCasts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *omilosClient) GetPublications(ctx context.Context, in *GetPublicationsRequest, opts ...grpc.CallOption) (*Publications, error) {
	out := new(Publications)
	err := c.cc.Invoke(ctx, "/omilos_grpc.Omilos/GetPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OmilosServer is the server API for Omilos service.
// All implementations must embed UnimplementedOmilosServer
// for forward compatibility
type OmilosServer interface {
	// Auth actions
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Hub actions
	PostCast(context.Context, *PostCastRequest) (*Cast, error)
	LikeCast(context.Context, *CastIdentifier) (*BaseResponse, error)
	RecastCast(context.Context, *CastIdentifier) (*BaseResponse, error)
	// Back actions
	UpdateUserCastContext(context.Context, *UserCastContextUpdate) (*BaseResponse, error)
	// Read
	GetMe(context.Context, *GetMeRequest) (*User, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*Notifications, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	GetCast(context.Context, *CastIdentifier) (*Cast, error)
	GetCasts(context.Context, *GetCastsRequest) (*Casts, error)
	GetPublications(context.Context, *GetPublicationsRequest) (*Publications, error)
	mustEmbedUnimplementedOmilosServer()
}

// UnimplementedOmilosServer must be embedded to have forward compatible implementations.
type UnimplementedOmilosServer struct {
}

func (UnimplementedOmilosServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedOmilosServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedOmilosServer) PostCast(context.Context, *PostCastRequest) (*Cast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCast not implemented")
}
func (UnimplementedOmilosServer) LikeCast(context.Context, *CastIdentifier) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeCast not implemented")
}
func (UnimplementedOmilosServer) RecastCast(context.Context, *CastIdentifier) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecastCast not implemented")
}
func (UnimplementedOmilosServer) UpdateUserCastContext(context.Context, *UserCastContextUpdate) (*BaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCastContext not implemented")
}
func (UnimplementedOmilosServer) GetMe(context.Context, *GetMeRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMe not implemented")
}
func (UnimplementedOmilosServer) GetNotifications(context.Context, *GetNotificationsRequest) (*Notifications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedOmilosServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedOmilosServer) GetCast(context.Context, *CastIdentifier) (*Cast, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCast not implemented")
}
func (UnimplementedOmilosServer) GetCasts(context.Context, *GetCastsRequest) (*Casts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCasts not implemented")
}
func (UnimplementedOmilosServer) GetPublications(context.Context, *GetPublicationsRequest) (*Publications, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublications not implemented")
}
func (UnimplementedOmilosServer) mustEmbedUnimplementedOmilosServer() {}

// UnsafeOmilosServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OmilosServer will
// result in compilation errors.
type UnsafeOmilosServer interface {
	mustEmbedUnimplementedOmilosServer()
}

func RegisterOmilosServer(s grpc.ServiceRegistrar, srv OmilosServer) {
	s.RegisterService(&Omilos_ServiceDesc, srv)
}

func _Omilos_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_PostCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).PostCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/PostCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).PostCast(ctx, req.(*PostCastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_LikeCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).LikeCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/LikeCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).LikeCast(ctx, req.(*CastIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_RecastCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).RecastCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/RecastCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).RecastCast(ctx, req.(*CastIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_UpdateUserCastContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCastContextUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).UpdateUserCastContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/UpdateUserCastContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).UpdateUserCastContext(ctx, req.(*UserCastContextUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetMe(ctx, req.(*GetMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetNotifications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetCast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CastIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetCast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetCast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetCast(ctx, req.(*CastIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetCasts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCastsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetCasts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetCasts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetCasts(ctx, req.(*GetCastsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Omilos_GetPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmilosServer).GetPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omilos_grpc.Omilos/GetPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmilosServer).GetPublications(ctx, req.(*GetPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Omilos_ServiceDesc is the grpc.ServiceDesc for Omilos service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Omilos_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "omilos_grpc.Omilos",
	HandlerType: (*OmilosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Omilos_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Omilos_Login_Handler,
		},
		{
			MethodName: "PostCast",
			Handler:    _Omilos_PostCast_Handler,
		},
		{
			MethodName: "LikeCast",
			Handler:    _Omilos_LikeCast_Handler,
		},
		{
			MethodName: "RecastCast",
			Handler:    _Omilos_RecastCast_Handler,
		},
		{
			MethodName: "UpdateUserCastContext",
			Handler:    _Omilos_UpdateUserCastContext_Handler,
		},
		{
			MethodName: "GetMe",
			Handler:    _Omilos_GetMe_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _Omilos_GetNotifications_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Omilos_GetUser_Handler,
		},
		{
			MethodName: "GetCast",
			Handler:    _Omilos_GetCast_Handler,
		},
		{
			MethodName: "GetCasts",
			Handler:    _Omilos_GetCasts_Handler,
		},
		{
			MethodName: "GetPublications",
			Handler:    _Omilos_GetPublications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omilos.proto",
}
